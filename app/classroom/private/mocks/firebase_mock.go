// Code generated by MockGen. DO NOT EDIT.
// Source: firebase.go
//
// Generated by this command:
//
//	mockgen -source=firebase.go -destination=private/mocks/firebase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/vladazn/danish/app/model"
	gomock "go.uber.org/mock/gomock"
)

// MockFirestore is a mock of Firestore interface.
type MockFirestore struct {
	ctrl     *gomock.Controller
	recorder *MockFirestoreMockRecorder
	isgomock struct{}
}

// MockFirestoreMockRecorder is the mock recorder for MockFirestore.
type MockFirestoreMockRecorder struct {
	mock *MockFirestore
}

// NewMockFirestore creates a new mock instance.
func NewMockFirestore(ctrl *gomock.Controller) *MockFirestore {
	mock := &MockFirestore{ctrl: ctrl}
	mock.recorder = &MockFirestoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirestore) EXPECT() *MockFirestoreMockRecorder {
	return m.recorder
}

// AddVocabulary mocks base method.
func (m *MockFirestore) AddVocabulary(ctx context.Context, userId string, vocab model.Vocab) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVocabulary", ctx, userId, vocab)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVocabulary indicates an expected call of AddVocabulary.
func (mr *MockFirestoreMockRecorder) AddVocabulary(ctx, userId, vocab any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVocabulary", reflect.TypeOf((*MockFirestore)(nil).AddVocabulary), ctx, userId, vocab)
}

// FetchUserPool mocks base method.
func (m *MockFirestore) FetchUserPool(ctx context.Context, userId string) (*model.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserPool", ctx, userId)
	ret0, _ := ret[0].(*model.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserPool indicates an expected call of FetchUserPool.
func (mr *MockFirestoreMockRecorder) FetchUserPool(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserPool", reflect.TypeOf((*MockFirestore)(nil).FetchUserPool), ctx, userId)
}

// FetchUserVocabSets mocks base method.
func (m *MockFirestore) FetchUserVocabSets(ctx context.Context, userId string) ([]model.VocabSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserVocabSets", ctx, userId)
	ret0, _ := ret[0].([]model.VocabSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserVocabSets indicates an expected call of FetchUserVocabSets.
func (mr *MockFirestoreMockRecorder) FetchUserVocabSets(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserVocabSets", reflect.TypeOf((*MockFirestore)(nil).FetchUserVocabSets), ctx, userId)
}

// FetchUserVocabulary mocks base method.
func (m *MockFirestore) FetchUserVocabulary(ctx context.Context, userId string) ([]model.Vocab, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserVocabulary", ctx, userId)
	ret0, _ := ret[0].([]model.Vocab)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserVocabulary indicates an expected call of FetchUserVocabulary.
func (mr *MockFirestoreMockRecorder) FetchUserVocabulary(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserVocabulary", reflect.TypeOf((*MockFirestore)(nil).FetchUserVocabulary), ctx, userId)
}

// GetMultipleVocabs mocks base method.
func (m *MockFirestore) GetMultipleVocabs(ctx context.Context, userId string, vocabIds []uuid.UUID) ([]model.Vocab, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipleVocabs", ctx, userId, vocabIds)
	ret0, _ := ret[0].([]model.Vocab)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultipleVocabs indicates an expected call of GetMultipleVocabs.
func (mr *MockFirestoreMockRecorder) GetMultipleVocabs(ctx, userId, vocabIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipleVocabs", reflect.TypeOf((*MockFirestore)(nil).GetMultipleVocabs), ctx, userId, vocabIds)
}

// GetVocab mocks base method.
func (m *MockFirestore) GetVocab(ctx context.Context, userId string, vocabId uuid.UUID) (*model.Vocab, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVocab", ctx, userId, vocabId)
	ret0, _ := ret[0].(*model.Vocab)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVocab indicates an expected call of GetVocab.
func (mr *MockFirestoreMockRecorder) GetVocab(ctx, userId, vocabId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVocab", reflect.TypeOf((*MockFirestore)(nil).GetVocab), ctx, userId, vocabId)
}

// GetVocabSet mocks base method.
func (m *MockFirestore) GetVocabSet(ctx context.Context, userId string, vocabSetId uuid.UUID) (*model.VocabSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVocabSet", ctx, userId, vocabSetId)
	ret0, _ := ret[0].(*model.VocabSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVocabSet indicates an expected call of GetVocabSet.
func (mr *MockFirestoreMockRecorder) GetVocabSet(ctx, userId, vocabSetId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVocabSet", reflect.TypeOf((*MockFirestore)(nil).GetVocabSet), ctx, userId, vocabSetId)
}

// RemoveVocabSet mocks base method.
func (m *MockFirestore) RemoveVocabSet(ctx context.Context, userId string, vocabSetId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVocabSet", ctx, userId, vocabSetId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVocabSet indicates an expected call of RemoveVocabSet.
func (mr *MockFirestoreMockRecorder) RemoveVocabSet(ctx, userId, vocabSetId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVocabSet", reflect.TypeOf((*MockFirestore)(nil).RemoveVocabSet), ctx, userId, vocabSetId)
}

// RemoveVocabulary mocks base method.
func (m *MockFirestore) RemoveVocabulary(ctx context.Context, userId string, vocabId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVocabulary", ctx, userId, vocabId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVocabulary indicates an expected call of RemoveVocabulary.
func (mr *MockFirestoreMockRecorder) RemoveVocabulary(ctx, userId, vocabId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVocabulary", reflect.TypeOf((*MockFirestore)(nil).RemoveVocabulary), ctx, userId, vocabId)
}

// SetVocabSet mocks base method.
func (m *MockFirestore) SetVocabSet(ctx context.Context, userId string, vocabSet model.VocabSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVocabSet", ctx, userId, vocabSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVocabSet indicates an expected call of SetVocabSet.
func (mr *MockFirestoreMockRecorder) SetVocabSet(ctx, userId, vocabSet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVocabSet", reflect.TypeOf((*MockFirestore)(nil).SetVocabSet), ctx, userId, vocabSet)
}

// UpdatePool mocks base method.
func (m *MockFirestore) UpdatePool(ctx context.Context, userId string, pool *model.Pool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePool", ctx, userId, pool)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePool indicates an expected call of UpdatePool.
func (mr *MockFirestoreMockRecorder) UpdatePool(ctx, userId, pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePool", reflect.TypeOf((*MockFirestore)(nil).UpdatePool), ctx, userId, pool)
}
