// Code generated by MockGen. DO NOT EDIT.
// Source: wordpool.go
//
// Generated by this command:
//
//	mockgen -source=wordpool.go -destination=private/mocks/rand_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRand is a mock of Rand interface.
type MockRand struct {
	ctrl     *gomock.Controller
	recorder *MockRandMockRecorder
	isgomock struct{}
}

// MockRandMockRecorder is the mock recorder for MockRand.
type MockRandMockRecorder struct {
	mock *MockRand
}

// NewMockRand creates a new mock instance.
func NewMockRand(ctrl *gomock.Controller) *MockRand {
	mock := &MockRand{ctrl: ctrl}
	mock.recorder = &MockRandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRand) EXPECT() *MockRandMockRecorder {
	return m.recorder
}

// IntN mocks base method.
func (m *MockRand) IntN(n int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntN", n)
	ret0, _ := ret[0].(int)
	return ret0
}

// IntN indicates an expected call of IntN.
func (mr *MockRandMockRecorder) IntN(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntN", reflect.TypeOf((*MockRand)(nil).IntN), n)
}

// Shuffle mocks base method.
func (m *MockRand) Shuffle(n int, f func(int, int)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shuffle", n, f)
}

// Shuffle indicates an expected call of Shuffle.
func (mr *MockRandMockRecorder) Shuffle(n, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shuffle", reflect.TypeOf((*MockRand)(nil).Shuffle), n, f)
}
